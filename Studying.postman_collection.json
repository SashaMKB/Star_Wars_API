{
	"info": {
		"_postman_id": "7fce5a03-5b8f-468e-af72-b87aef67bec3",
		"name": "Studying",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28654700"
	},
	"item": [
		{
			"name": "tests",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Check response has JSON\r",
							"pm.test(\"Check response has JSON\", function() {\r",
							"    pm.response.to.have.jsonBody()\r",
							"});\r",
							"\r",
							"//2. We have all the declareted fields in the results\r",
							"pm.test(\"Check that we have all declareted fields\", function() {\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.expect(jsonData).to.have.property(\"people\");\r",
							"pm.expect(jsonData).to.have.property(\"planets\");\r",
							"pm.expect(jsonData).to.have.property(\"films\");\r",
							"pm.expect(jsonData).to.have.property(\"species\");\r",
							"pm.expect(jsonData).to.have.property(\"vehicles\");\r",
							"pm.expect(jsonData).to.have.property(\"starships\");\r",
							"});\r",
							"\r",
							"//3. Field value is not null\r",
							"pm.test(\"Check if value isnt null\",function() {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.people).not.equal(null);\r",
							"    pm.expect(jsonData.planets).not.equal(null);\r",
							"    pm.expect(jsonData.films).not.equal(null);\r",
							"    pm.expect(jsonData.species).not.equal(null);\r",
							"    pm.expect(jsonData.vehicles).not.equal(null);\r",
							"    pm.expect(jsonData.starships).not.equal(null);\r",
							"});\r",
							"\r",
							"//4. Check if value isnt empty\r",
							"\r",
							"pm.test(\"Check if value isnt empty\", function() {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.people).not.equal(\"\");\r",
							"    pm.expect(jsonData.planets).not.equal(\"\");\r",
							"    pm.expect(jsonData.films).not.equal(\"\");\r",
							"    pm.expect(jsonData.species).not.equal(\"\");\r",
							"    pm.expect(jsonData.vehicles).not.equal(\"\");\r",
							"    pm.expect(jsonData.starships).not.equal(\"\");\r",
							"});\r",
							"\r",
							"//5. Check if fields corresponds to a specific value\r",
							"pm.test(\"Check if fields corresponds to a specific value\", function() {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.people).to.equal(\"https://swapi.dev/api/people/\");\r",
							"});\r",
							"\r",
							"//6. Check status code \r",
							"pm.test(\"Status code is 200\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//7. Status message is OK\r",
							"pm.test(\"Status message is OK\", function() {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"//8. Response time is less than 1000ms\r",
							"pm.test(\"Response time is less than 1000ms\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"//9. There is a specidic header in the reponse\r",
							"pm.test(\"There is a specidic header in the reponse\", function() {\r",
							"pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"//10. The pesponce has a specidic header with a specific value\r",
							"pm.test(\"The pesponce has a specidic header with a specific value\", function(){\r",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"//11. Cookie exists \r",
							"pm.test(\"Cokie exists\", function() {\r",
							"    pm.cookies.has(\"csrftoken\");\r",
							"});\r",
							"\r",
							"//12. Coockie has value\r",
							"pm.test(\"Coockie has value\", function() {\r",
							"    try{\r",
							"    var MY_COOCKIE = pm.cookies.get(\"csrftoken\");        \r",
							"    console.log(MY_COOCKIE);\r",
							"    } catch (e) {\r",
							"        console.log(\"Some problems with cockies -> \", e);\r",
							"    }\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.dev/api",
					"protocol": "https",
					"host": [
						"swapi",
						"dev"
					],
					"path": [
						"api"
					]
				}
			},
			"response": []
		},
		{
			"name": "json schema 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// создание JSON схемы\r",
							"var data = JSON.parse(responseBody); // парсинг ответа\r",
							"\r",
							"var schema = {\r",
							"    // specify the type of object\r",
							"    \"type\":\"object\",\r",
							"    //specify requires properties\r",
							"    \"required\":[\"people\",\"planets\",\"films\",\"species\",\"vehicles\",\"starships\"],\r",
							"    // describe the properties\r",
							"    \"properties\":{\r",
							"        \"people\":{\"type\":\"string\"},\r",
							"        \"planets\":{\"type\":\"string\"},\r",
							"        \"films\":{\"type\":\"string\"},\r",
							"        \"species\":{\"type\":\"string\"},\r",
							"        \"vehicles\":{\"type\":\"string\"},\r",
							"        \"starships\":{\"type\":\"string\"}\r",
							"    }\r",
							"}\r",
							"\r",
							"\r",
							"pm.test(\"Body is correct\", function(){\r",
							"    pm.expect(tv4.validate(data, schema)).to.be.true;\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.dev/api",
					"protocol": "https",
					"host": [
						"swapi",
						"dev"
					],
					"path": [
						"api"
					]
				}
			},
			"response": []
		},
		{
			"name": "json schema 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"\r",
							"// Add test for JSON schema validation\r",
							"pm.test(\"Response body matches the JSON schema\", function () {\r",
							"    var schema = {\r",
							"        \"type\": \"object\",\r",
							"        \"properties\": {\r",
							"            \"name\": { \"type\": \"string\" },\r",
							"            \"height\": { \"type\": \"string\" },\r",
							"            \"mass\": { \"type\": \"string\" },\r",
							"            \"hair_color\": { \"type\": \"string\" },\r",
							"            \"skin_color\": { \"type\": \"string\" },\r",
							"            \"eye_color\": { \"type\": \"string\" },\r",
							"            \"birth_year\": { \"type\": \"string\" },\r",
							"            \"gender\": { \"type\": \"string\" },\r",
							"            \"homeworld\": { \"type\": \"string\" },\r",
							"            \"films\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } },\r",
							"            \"species\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } },\r",
							"            \"vehicles\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } },\r",
							"            \"starships\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } },\r",
							"            \"created\": { \"type\": \"string\" },\r",
							"            \"edited\": { \"type\": \"string\" },\r",
							"            \"url\": { \"type\": \"string\" }\r",
							"        },\r",
							"        \"required\": [\"name\", \"homeworld\", \"films\", \"species\", \"vehicles\", \"starships\"]\r",
							"    };\r",
							"\r",
							"    pm.expect(pm.response.json()).to.be.jsonSchema(schema);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.dev/api/people/1",
					"protocol": "https",
					"host": [
						"swapi",
						"dev"
					],
					"path": [
						"api",
						"people",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "https://01ae7159-231e-4448-8725-332a66f6cbd5.mock.pstmn.io",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://01ae7159-231e-4448-8725-332a66f6cbd5.mock.pstmn.io",
					"protocol": "https",
					"host": [
						"01ae7159-231e-4448-8725-332a66f6cbd5",
						"mock",
						"pstmn",
						"io"
					]
				}
			},
			"response": [
				{
					"name": "https://01ae7159-231e-4448-8725-332a66f6cbd5.mock.pstmn.io",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://01ae7159-231e-4448-8725-332a66f6cbd5.mock.pstmn.io",
							"protocol": "https",
							"host": [
								"01ae7159-231e-4448-8725-332a66f6cbd5",
								"mock",
								"pstmn",
								"io"
							]
						}
					},
					"_postman_previewlanguage": null,
					"header": null,
					"cookie": [],
					"body": "{\r\n    \"status\": {\r\n        \"name\": \"test\",\r\n        \"message\": \"success\"\r\n    }\r\n}"
				},
				{
					"name": "https://01ae7159-231e-4448-8725-332a66f6cbd5.mock.pstmn.io",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"alexandr\"\r\n}"
						},
						"url": {
							"raw": "https://01ae7159-231e-4448-8725-332a66f6cbd5.mock.pstmn.io/action",
							"protocol": "https",
							"host": [
								"01ae7159-231e-4448-8725-332a66f6cbd5",
								"mock",
								"pstmn",
								"io"
							],
							"path": [
								"action"
							]
						}
					},
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"status\": {\n        \"name\": \"alecandr\",\n        \"message\": \"success\",\n        \"auth\":true\n    }\n}"
				}
			]
		}
	]
}